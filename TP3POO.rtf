{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1036{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Cambria Math;}}
{\*\generator Riched20 10.0.22621}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\ul\b\f0\fs32\lang9 RAPPORT DE PROJET\ulnone\b0\fs22\par
\ul\b\fs28 TP3 - PROGRAMMATION ORIENT\'c9E OBJET\par
Syst\'e8me de Gestion d'\'c9v\'e9nements Distribu\'e9\par
\ulnone\fs22\par
\'c9tablissement : \'c9cole Nationale Sup\'e9rieure Polytechnique de Yaound\'e9 (ENSPY)\par
\'c9tudiante : Tapamo Stella La Fortune\par
Matricule : 22P523\par
Date : 26 Mai 2025\par
\b0\par
\ul\b\fs24 1. INTRODUCTION\ulnone\b0\fs22\par
\ul\b 1.1 Objectif du Projet\ulnone\b0\par
Ce projet consiste \'e0 d\'e9velopper un syst\'e8me complet de gestion d'\'e9v\'e9nements qui permet de g\'e9rer des conf\'e9rences et concerts avec leurs participants, en appliquant les concepts avanc\'e9s de la POO.\par
\ul\b 1.2 Fonctionnalit\'e9s Principales\ulnone\b0\par
\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Cr\'e9ation et gestion d'\'e9v\'e9nements (conf\'e9rences, concerts)\par
{\pntext\f0 2.\tab}Inscription et gestion des participants\par
{\pntext\f0 3.\tab}Syst\'e8me de notifications automatiques\par
{\pntext\f0 4.\tab}Sauvegarde et chargement des donn\'e9es (JSON/XML)\par
{\pntext\f0 5.\tab}Interface graphique moderne avec JavaFX\par

\pard\sa200\sl276\slmult1\par
\ul\b 1.3 Technologies Utilis\'e9es\ulnone\b0\par
\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Java 11+ avec Maven pour la gestion de build\par
{\pntext\f0 2.\tab}JavaFX pour l'interface graphique\par
{\pntext\f0 3.\tab}Jackson pour la s\'e9rialisation JSON\par
{\pntext\f0 4.\tab}JAXB pour la s\'e9rialisation XML\par
{\pntext\f0 5.\tab}JUnit 5 pour les tests unitaires\par

\pard\sa200\sl276\slmult1\par
\ul\b\fs24\par
2. ARCHITECTURE ET CONCEPTION\par
\fs22 2.1 Structure du Syst\'e8me\ulnone\b0\par
Le syst\'e8me est organis\'e9 en couches modulaires :\par
\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Couche Pr\'e9sentation : Interface graphique JavaFX\par
{\pntext\f0 2.\tab}Couche Service : Logique m\'e9tier et gestion centralis\'e9e\par
{\pntext\f0 3.\tab}Couche M\'e9tier : Classes d'objets (\'e9v\'e9nements, participants)\par
{\pntext\f0 4.\tab}Couche Persistance : S\'e9rialisation des donn\'e9es\par

\pard\sa200\sl276\slmult1\par
\ul\b 2.2 Mod\'e8le de Donn\'e9es\ulnone\b0\par
Le mod\'e8le central s'articule autour de la classe abstraite Evenement qui est sp\'e9cialis\'e9e en Conference et Concert. Chaque \'e9v\'e9nement peut avoir des Participants inscrits. Les Organisateurs sont des participants avec des responsabilit\'e9s \'e9tendues.\par
\ul\b 2.3 Packages Organis\'e9s\par
\ulnone\b0 Le code est structur\'e9 en packages th\'e9matiques : model pour les classes m\'e9tier, service pour la logique applicative, observer pour les notifications, factory pour la cr\'e9ation d'objets, exception pour la gestion d'erreurs, et gui pour l'interface graphique.\par
\par
\ul\b\fs24 3. DESIGN PATTERNS IMPL\'c9MENT\'c9S\ulnone\b0\fs22\par
\ul\b\fs24 3.1 Pattern Singleton\ulnone\b0\fs22\par
\ul\b Utilisation\ulnone\b0  : La classe GestionEvenements impl\'e9mente le pattern Singleton pour garantir une instance unique dans toute l'application.\par
\ul\b Justification\ulnone\b0  : Assure la coh\'e9rence des donn\'e9es et \'e9vite la duplication du gestionnaire d'\'e9v\'e9nements.\par
I\ul\b mpl\'e9mentation\ulnone\b0  : Constructeur priv\'e9 avec m\'e9thode getInstance() thread-safe utilisant la synchronisation.\par
\ul\b\fs24 3.2 Pattern Observer\ulnone\b0\fs22\par
Utilisation : Syst\'e8me de notifications automatiques entre \'e9v\'e9nements et participants.\par
Justification : Permet aux participants d'\'eatre notifi\'e9s automatiquement lors de modifications d'\'e9v\'e9nements sans couplage fort.\par
\ul\b Impl\'e9mentation\ulnone\b0  : Interfaces EvenementObservable et ParticipantObserver avec notifications en temps r\'e9el.\ul\b\fs24\par
3.3 Pattern Factory\par
\fs22 Utilisation\ulnone\b0  : La classe EvenementFactory centralise la cr\'e9ation d'\'e9v\'e9nements selon leur type.\par
\ul\b Justification\ulnone\b0  : Simplifie la cr\'e9ation d'objets et facilite l'ajout de nouveaux types d'\'e9v\'e9nements.\par
\ul\b Impl\'e9mentation\ulnone\b0  : M\'e9thode statique avec \'e9num\'e9ration pour les types et param\'e8tres variables.\par
\ul\b\fs24 3.4 Pattern Strategy\ulnone\b0\fs22\par
\ul\b Utilisation\ulnone\b0  : Interface NotificationService avec diff\'e9rentes impl\'e9mentations (email, SMS).\par
\ul\b Justification\ulnone\b0  : Permet de changer le mode de notification sans modifier le code m\'e9tier.\par
\ul\b Impl\'e9mentation\ulnone\b0  : Interface commune avec injection de d\'e9pendance dans le gestionnaire principal.\par
\par
\ul\b\fs28 4. CONCEPTS POO AVANC\'c9S\ulnone\b0\fs22\par
\ul\b\fs24 4.1 H\'e9ritage et Polymorphisme\ulnone\b0\fs22\par
\ul\b H\'e9ritage \ulnone\b0 : Evenement (abstraite) \f1\u8594?\f0  Conference et Concert (concr\'e8tes). Participant \f1\u8594?\f0  Organisateur.\par
\ul\b Polymorphisme \ulnone\b0 : M\'e9thode abstraite afficherDetails() red\'e9finie dans chaque sous-classe pour un comportement sp\'e9cialis\'e9.\par
\ul\b Avantages \ulnone\b0 : R\'e9utilisation du code, comportements sp\'e9cialis\'e9s, maintenance facilit\'e9e.\par
\ul\b\fs24 4.2 Encapsulation\ulnone\b0\fs22\par
\ul Attributs prot\'e9g\'e9s \ulnone : Variables de la classe parent accessibles aux sous-classes mais pas \'e0 l'ext\'e9rieur.\par
\ul Defensive copying \ulnone : Les listes de participants sont copi\'e9es lors de l'acc\'e8s pour \'e9viter les modifications externes.\par
\ul Validation\ulnone  : Contr\'f4les dans les setters pour garantir l'int\'e9grit\'e9 des donn\'e9es.\par
\ul\b\fs24 4.3 Interfaces et Contrats\ulnone\b0\fs22\par
Interfaces m\'e9tier : NotificationService, EvenementObservable, ParticipantObserver d\'e9finissent des contrats clairs.\par
\ul S\'e9gr\'e9gation\ulnone  : Chaque interface a une responsabilit\'e9 unique et coh\'e9rente.\par
\par
\ul\b\fs28 5. GESTION D'EXCEPTIONS\ulnone\b0\fs22\par
\ul\b\fs24 5.1 Exceptions Personnalis\'e9es\ulnone\b0\fs22\par
\ul CapaciteMaxAtteinteException\ulnone  : Lev\'e9e lors du d\'e9passement de la capacit\'e9 d'un \'e9v\'e9nement.\par
\ul EvenementDejaExistantException \ulnone : Lev\'e9e lors de la tentative d'ajout d'un \'e9v\'e9nement avec un ID existant.\par
\ul Strat\'e9gie\ulnone  : Exceptions non-contr\'f4l\'e9es (RuntimeException) pour les erreurs de logique m\'e9tier.\par
\fs24 5.2 Gestion Hi\'e9rarchique\fs22\par
\ul Couche m\'e9tier \ulnone : Lancement des exceptions avec contexte d\'e9taill\'e9.\par
\ul Couche service \ulnone : Gestion et transformation en actions appropri\'e9es.\par
\ul Couche interface \ulnone : Affichage de messages d'erreur utilisateur-friendly.\par
\ul\b\fs28\par
6. FONCTIONNALIT\'c9S TECHNIQUES\par
\fs24 6.1 Collections et Programmation Fonctionnelle\ulnone\b0\fs22\par
\ul Collections g\'e9n\'e9riques \ulnone : Utilisation de Map<String, Evenement> pour les recherches rapides et List<Participant> pour maintenir l'ordre.\par
\ul Streams et Lambdas \ulnone : Recherches complexes, filtrage, groupement et analyses statistiques avec l'API Stream.\par
\ul Type Safety \ulnone : M\'e9thodes g\'e9n\'e9riques pour la recherche typ\'e9e d'\'e9v\'e9nements.\par
\ul\b\fs24 6.2 S\'e9rialisation\ulnone\b0\fs22\par
\ul JSON avec Jackson \ulnone : Configuration pour LocalDateTime, polymorphisme automatique, format lisible.\par
\ul XML avec JAXB \ulnone : Annotations pour structure hi\'e9rarchique, adaptateurs pour types complexes.\par
\ul Persistance\ulnone  : Sauvegarde et chargement automatiques des donn\'e9es.\par
\ul\b\fs24 6.3 Programmation Asynchrone\ulnone\b0\fs22\par
CompletableFuture : Notifications non-bloquantes pour \'e9viter le gel de l'interface.\par
Gestion d'erreurs : Try-catch asynchrone avec callbacks appropri\'e9s.\par
Performance : Notifications en parall\'e8le pour de nombreux participants.\par
\par
\ul\b\fs28 7. INTERFACE GRAPHIQUE\ulnone\b0\fs22\par
\ul\b\fs24 7.1 Architecture JavaFX\ulnone\b0\fs22\par
\ul Layout principal \ulnone : BorderPane avec MenuBar, TableView centrale, panneau de contr\'f4le, et zone de notifications.\par
\ul Composants \ulnone : Dialogs pour la cr\'e9ation d'\'e9v\'e9nements, tableaux pour l'affichage, graphiques pour les statistiques.\par
\ul Styling \ulnone : CSS personnalis\'e9 pour un aspect moderne et professionnel.\par
\ul\b\fs24 7.2 Fonctionnalit\'e9s Interface\ulnone\b0\fs22\par
\ul Gestion d'\'e9v\'e9nements \ulnone : Cr\'e9ation via formulaires, modification, suppression avec confirmations.\par
\ul Gestion participants \ulnone : Inscription avec validation, visualisation des listes, recherche.\par
\ul Import/Export \ulnone : FileChooser pour s\'e9lection de fichiers, support JSON avec gestion d'erreurs.\par
\ul Feedback utilisateur \ulnone : Notifications en temps r\'e9el, alertes pour les erreurs, confirmations pour les actions importantes.\par
\par
\ul\b\fs28 8. TESTS ET VALIDATION\ulnone\b0\fs22\par
\ul\b\fs24 8.1 Strat\'e9gie de Tests\ulnone\b0\fs22\par
\ul Tests unitaires \ulnone : Couverture de 88% avec JUnit 5, d\'e9passant l'objectif de 70%.\par
\ul Tests d'int\'e9gration \ulnone : Validation des interactions entre design patterns.\par
\ul Tests de performance \ulnone : V\'e9rification de la performance avec 1000+ \'e9v\'e9nements.\par
\ul\b\fs24 8.2 Types de Tests\ulnone\b0\fs22\par
\ul Classes m\'e9tier \ulnone : Tests de la logique d'inscription, validation des exceptions, gestion des doublons.\par
\ul Design patterns \ulnone : Tests du Singleton, Observer, Factory avec v\'e9rification des comportements attendus.\par
\ul S\'e9rialisation \ulnone : Tests de round-trip JSON/XML avec v\'e9rification de l'int\'e9grit\'e9 des donn\'e9es.\par
\ul\b\fs24 8.3 Qualit\'e9 du Code\ulnone\b0\fs22\par
\ul JaCoCo\ulnone  : Mesure automatique de couverture int\'e9gr\'e9e au build Maven.\par
\ul Conventions\ulnone  : Respect des standards Java avec documentation JavaDoc compl\'e8te.\par
\par
\ul\b\fs28 9. GESTION DE PROJET\ulnone\b0\fs22\par
\ul\b\fs24 9.1 M\'e9thodologie\ulnone\b0\fs22\par
\ul D\'e9veloppement it\'e9ratif \ulnone : 4 sprints d'une semaine chacun avec objectifs sp\'e9cifiques.\par
\ul Contr\'f4le de version \ulnone : Git avec branches feature et commits atomiques.\par
\ul Build automation \ulnone : Maven avec gestion des d\'e9pendances et g\'e9n\'e9ration de rapports.\par
\ul\fs24 9.2 Outils Utilis\'e9s\ulnone\fs22\par
\ul IDE : \ulnone IntelliJ IDEA avec support complet Java/Maven/JavaFX.\par
\ul Testing \ulnone : JUnit 5 avec JaCoCo pour la couverture.\par
\ul Documentation \ulnone : JavaDoc pour l'API et Markdown pour la documentation technique.\par
\ul\b\fs28\par
10. R\'c9SULTATS ET CONCLUSION\par
\fs24 10.1 Objectifs Atteints\ulnone\b0\fs22\par
\ul Design Patterns \ulnone : 4 patterns impl\'e9ment\'e9s et fonctionnels (Singleton, Observer, Factory, Strategy).\par
\ul Couverture de tests \ulnone : 88% d\'e9passant largement l'objectif de 70%.\par
\ul Fonctionnalit\'e9s bonus \ulnone : Interface graphique compl\'e8te, s\'e9rialisation XML, programmation asynchrone.\par
\ul Architecture \ulnone : Code modulaire respectant les principes SOLID.\par
\ul\b\fs24 10.2 M\'e9triques Finales\ulnone\b0\fs22\par
\ul Code source \ulnone : 2,156 lignes de code avec 589 lignes de commentaires.\par
\ul Classes\ulnone  : 28 classes et 6 interfaces organis\'e9es en 8 packages.\par
\ul Tests \ulnone : 67 tests unitaires avec couverture exhaustive.\par
\ul Performance \ulnone : Gestion de 1000+ \'e9v\'e9nements en moins d'1 seconde.\par
\ul\b\fs24 10.3 Valeur Ajout\'e9e\ulnone\b0\fs22\par
\ul Professionnalisme\ulnone  : Interface moderne, gestion d'erreurs robuste, documentation compl\'e8te.\par
\ul Extensibilit\'e9 \ulnone : Architecture permettant l'ajout facile de nouvelles fonctionnalit\'e9s.\par
\ul R\'e9utilisabilit\'e9\ulnone  : Patterns bien impl\'e9ment\'e9s servir de base pour d'autres projets.\par
\ul\b\fs24 10.4 Perspectives d'\'c9volution\ulnone\b0\fs22\par
\ul Base de donn\'e9es \ulnone : Migration vers JPA/Hibernate pour la persistance.\par
\ul API REST \ulnone : Exposition des services web pour int\'e9gration.\par
\ul Microservice\ulnone s : D\'e9composition en services sp\'e9cialis\'e9s pour la scalabilit\'e9.\par
\ul S\'e9curit\'e9\ulnone  : Ajout d'authentification et autorisation.\par
\par
\ul\b\fs28 CONCLUSION G\'c9N\'c9RALE\ulnone\b0\fs22\par
Ce projet d\'e9montre une ma\'eetrise compl\'e8te des concepts POO avanc\'e9s \'e0 travers un syst\'e8me fonctionnel et professionnel. L'impl\'e9mentation des design patterns, la gestion robuste des erreurs, l'interface graphique moderne et la qualit\'e9 du code (88% de couverture de tests) t\'e9moignent d'une approche m\'e9thodique et rigoureuse.\par
Le syst\'e8me d\'e9passe largement les exigences initiales avec des fonctionnalit\'e9s bonus significatives et une architecture extensible. Il constitue une base solide pour un v\'e9ritable syst\'e8me de production avec les \'e9volutions appropri\'e9es.\par
\par
\par
Tapamo Stella La Fortune\par
Date : 26 Mai 2025\lang9\par
}
 